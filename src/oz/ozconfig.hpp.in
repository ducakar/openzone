#pragma once

// define custom "keywords" as macros to highlight them in Eclipse CDT (assuming one has set the
// same highlighting for macros and keywords)
#cmakedefine OZ_ECLIPSE_HIGHLIGHTING

// enable inlining in debug mode for critical functions
#cmakedefine OZ_ALWAYS_INLINE

// enable new and delete to count allocated memory
#cmakedefine OZ_ALLOC_STATISTICS

// enable new and delete to save stack traces to show memory leaks
#cmakedefine OZ_TRACE_LEAKS

// enable Pool allocator; otherwise just call Alloc::alloc/dealloc
#cmakedefine OZ_POOL_ALLOC

// whether GCC-compatible builtin functions should be used to avoid including <cmath>
#cmakedefine OZ_BUILTIN_MATH

// whether math library has sincosf function
#cmakedefine OZ_HAVE_SINCOSF

// use SIMD for vector math
#cmakedefine OZ_SIMD

// use big-endian for stream
#cmakedefine OZ_BIG_ENDIAN_STREAM

// check read buffer overruns for stream
#cmakedefine OZ_STREAM_READ_CHECK

// enable warnings about missing and unused variables in config files
#cmakedefine OZ_VERBOSE_CONFIG

// platform
#if defined( WIN32 ) || defined( __WIN32__ )
# define OZ_WINDOWS
#endif

#if defined( OZ_WINDOWS ) && defined( __GNUC__ )
# define OZ_MINGW
#endif

// machine endian
#if defined( __BIG_ENDIAN__ )
# define OZ_BIG_ENDIAN_ARCH
#endif

// long and pointer sizes
#ifndef __LP64__
# define OZ_LONG_32
#endif

#if !defined( __LP64__ ) && !defined( __LLP64__ ) && !defined( _WIN64 )
# define OZ_POINTER_32
#endif

// compiler-specific hacks
#if defined( __GNUC__ ) && !defined( __clang__ )
# if __GNUC__ < 4 || ( __GNUC__ == 4 && __GNUC_MINOR__ < 4 )
#  error Too old GCC, at least 4.4 is required, 4.5 recommended
# endif
# if __GNUC__ == 4 && __GNUC_MINOR__ <= 5
#  define nullptr __null
# endif
#endif

#ifdef __clang__
# undef __GXX_EXPERIMENTAL_CXX0X__
#endif

#ifdef OZ_ECLIPSE_HIGHLIGHTING
# define nil            nil
# define byte           byte
# define ubyte          ubyte
# define ushort         ushort
# define uint           uint
# define ulong          ulong
# define long64         long64
# define ulong64        ulong64
#endif

#ifdef OZ_ALWAYS_INLINE
# undef OZ_ALWAYS_INLINE
# define OZ_ALWAYS_INLINE __attribute__(( always_inline ))
#else
# define OZ_ALWAYS_INLINE
#endif

#define OZ_WEAK_SYMBOL __attribute__(( weak ))

#if !defined( __GNUC__ ) && !defined( __clang__ )
# undef OZ_BUILTIN_MATH
#endif
