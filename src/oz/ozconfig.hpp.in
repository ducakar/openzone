#pragma once

// enable new and delete to save stack traces to show memory leaks
#cmakedefine OZ_TRACE_LEAKS

// enable Pool allocator; otherwise just call new char[]/delete[]
#cmakedefine OZ_POOL_ALLOC

// whether math library has sincosf function
#cmakedefine OZ_HAVE_SINCOSF

// enable SIMD code for vector math
#cmakedefine OZ_SIMD

// use big-endian for stream
#cmakedefine OZ_BIG_ENDIAN_STREAM

// we are compiling with MinGW for Windows platform
#cmakedefine OZ_MINGW

#if defined( __clang__ )
# if __clang_major__ < 3
#  error GCC >= 4.6 and LLVM/Clang >= 3.0 are the only supported compilers
# endif
#elif defined( __GNUC__ )
# if __GNUC__ < 4 || ( __GNUC__ == 4 && __GNUC_MINOR__ < 6 )
#  error GCC >= 4.6 and LLVM/Clang >= 3.0 are the only supported compilers
# endif
#else
# error GCC >= 4.6 and LLVM/Clang >= 3.0 are the only supported compilers
#endif

// Disable C++11 stuff in standard headers, Clang and IDE parsers have problems with that,
// and we don't need it anyway ...
#undef __GXX_EXPERIMENTAL_CXX0X__
// ... except for nullptr_t definition
namespace std { typedef decltype( nullptr ) nullptr_t; }

// Some KDevelop hacks, ifdef is never processed by a compiler, but KDevelop obviously doesn't
// recognise __LINE__ macro.
#ifndef __LINE__
# define final
# define noexcept
# define override
#endif

#ifdef __BIG_ENDIAN__
# define OZ_BIG_ENDIAN_ARCH
#endif

// long and pointer sizes
#ifndef __LP64__
# define OZ_LONG_32
#endif

#if !defined( __LP64__ ) && !defined( __LLP64__ )
# define OZ_POINTER_32
#endif

#define OZ_ALWAYS_INLINE __attribute__(( always_inline ))
#define OZ_WEAK_SYMBOL   __attribute__(( weak ))
#define OZ_THREAD_LOCAL  __thread
