/*
 * liboz - OpenZone core library.
 *
 * Copyright © 2002-2012 Davorin Učakar
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software in
 *    a product, an acknowledgement in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

#pragma once

/*
 * Configuration variables
 */

// Make new and delete operators save stack traces to track memory leaks.
#cmakedefine OZ_TRACK_LEAKS

/*
 * Compiler and platform-specific macros
 */

#if defined( _MSC_VER )
# error GCC >= 4.4 and LLVM/Clang >= 3.0 are the only supported compilers.
# define OZ_MSVC _MSC_VER
#elif defined( __clang__ )
# if __clang_major__ < 3
#  error Only LLVM/Clang >= 3.0 is supported.
# endif
# define OZ_CLANG ( __clang_major__ * 100 + __clang_minor__ )
#elif defined( __GNUC__ )
# if __GNUC__ < 4 || ( __GNUC__ == 4 && __GNUC_MINOR__ < 4 )
#  error Only GCC >= 4.4 is supported.
# endif
# define OZ_GCC ( __GNUC__ * 100 + __GNUC_MINOR__ )
#else
# error GCC >= 4.4 and LLVM/Clang >= 3.0 are the only supported compilers.
#endif

#if !defined( __LP64__ ) && !defined( __LLP64__ ) && !defined( _WIN64 )
# define OZ_POINTER_32
#endif

#if !defined( __LP64__ )
# define OZ_LONG_32
#endif

#if defined( __BIG_ENDIAN__ )
# define OZ_BIG_ENDIAN_ARCH
#endif

#define OZ_ALWAYS_INLINE             __attribute__(( always_inline ))
#define OZ_NORETURN                  __attribute__(( noreturn ))
#define OZ_PRINTF_FORMAT( s, first ) __attribute__(( format( printf, s, first ) ))

#if defined( OZ_GCC ) && OZ_GCC < 406
# define constexpr const
# define noexcept  throw()
# define nullptr   0
  namespace std { typedef decltype( nullptr ) nullptr_t; }
#endif
