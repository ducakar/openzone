/*
 * liboz - OpenZone Core Library.
 *
 * Copyright © 2002-2012 Davorin Učakar
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software in
 *    a product, an acknowledgement in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

#pragma once

/*
 * Configuration variables
 */

// Enable tracking of allocated memory chunks in liboz. Stack trace for every memory allocation
// performed via new operator is saved for later diagnostics. It detects new/delete mismatches and
// one can check for currently allocated memory chunks (and hence memory leaks).
#cmakedefine OZ_TRACK_ALLOCS

// Enable SIMD-specific implementation of linear algebra classes (Vec3, Vec4, Point, Plane, Quat,
// Mat44). Currently it yields ~15% worse performance than generic implementations since Vec3 and
// Point classes are a bit larger (4 floats v. 3 floats) and there are lots of accesses to vector
// components in OpenZone code.
#cmakedefine OZ_SIMD_MATH

/*
 * Compiler and platform-specific macros
 */

#if defined( _MSC_VER )
# error Microsoft Compiler cannot compile OpenZone due to lack of C++11 support.
# error GCC >= 4.4 and LLVM/Clang >= 3.0 are the only supported compilers.
# define OZ_MSVC _MSC_VER
#elif defined( __OPENCC__ )
# error Open64 cannot compile OpenZone due to lack of C++11 support.
# error GCC >= 4.4 and LLVM/Clang >= 3.0 are the only supported compilers.
# define OZ_OPEN64 ( __OPENCC__ * 100 + __OPENCC_MINOR__ )
#elif defined( __clang__ )
# if __clang_major__ < 3
#  error Only LLVM/Clang >= 3.0 is supported.
# endif
# define OZ_CLANG ( __clang_major__ * 100 + __clang_minor__ )
#elif defined( __GNUC__ )
# if __GNUC__ < 4 || ( __GNUC__ == 4 && __GNUC_MINOR__ < 4 )
#  error Only GCC >= 4.4 is supported.
# endif
# define OZ_GCC ( __GNUC__ * 100 + __GNUC_MINOR__ )
#else
# error GCC >= 4.4 and LLVM/Clang >= 3.0 are the only supported compilers.
#endif

// C++11 workarounds for older GCC versions.
#if defined( OZ_GCC ) && OZ_GCC < 406
# define constexpr const
# define noexcept  throw()
# define nullptr   __null
namespace std { typedef __PTRDIFF_TYPE__ nullptr_t; }
#endif
#if defined( OZ_GCC ) && OZ_GCC < 407
# define override
# define final
#endif

// For now, SSE3 is mandatory for OZ_SIMD_MATH.
#if defined( OZ_SIMD_MATH ) && !defined( __SSE3__ )
# error SSE3 must be enabled for OZ_SIMD_MATH. Compile with -msse3.
#endif

#ifdef _WIN32
// At least Visual Studio 2005 run-time libraries required.
# define __MSVCRT_VERSION__ 0x0800
// At least Windows XP/2003 required.
# define WINVER 0x0501
// At least Internet Explorer 6.0 libraries required.
# define _WIN32_IE 0x0600
// Don't import all crap from Windows headers.
# define WIN32_LEAN_AND_MEAN
// Don't define min and max macros as they interfere with oz::min and oz::max.
# define NOMINMAX
#endif

// Define OZ_ECLIPSE macro in project configurations when using Eclipse CDT.
#ifdef OZ_ECLIPSE

// One should have same colour for highlighting macros and reserved words and those identifiers
// should look as reserved words.
# define byte     byte
# define ubyte    ubyte
# define ushort   ushort
# define uint     uint
# define ulong    ulong
# define long64   long64
# define ulong64  ulong64

# define noexcept throw()
# define override
# define final

unsigned int __builtin_bswap32( unsigned int );
unsigned long long __builtin_bswap64( unsigned long long );

float __builtin_fminf( float, float );
float __builtin_fmaxf( float, float );
float __builtin_roundf( float );
float __builtin_truncf( float );
float __builtin_powf( float, float );
float __builtin_isnormal( float );
float __builtin_ia32_vec_ext_v4sf( float, int );
float __builtin_ia32_shufps( float, float, int );
float __builtin_ia32_haddps( float, float );
float __builtin_ia32_hsubps( float, float );

namespace std { typedef decltype( nullptr ) nullptr_t; }

#endif
