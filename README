
                                        OpenZone

                                      version 0.3.0

Free camera controls
--------------------
mouse movement      - rotate camera (when in UI mode, push mouse cursor into screen borders)
arrow keys          - rotate camera
w/a/s/d             - move forwards, left, backwards, right
Space               - up/increase height
LCtrl               - down/decrease height
LShift              - toggle fast move
Tab                 - toggle interface mode
Numpad Enter        - switch between FreeCam and Strategic camera
i                   - incarnate into the selected bot (also works when the bot is inside a vehicle)

Bot controls
------------
mouse movement      - look around (when in UI mode, push mouse cursor into screen borders)
arrow keys          - look around
w/a/s/d             - move forwards, left, backwards, right
LShift              - toggle run
LCtrl               - toggle crouch
Space               - jump

left click          - trigger equipped weapon
right click         - use tagged object or enter tagged vehicle
middle click        - grab/drop tagged object
q                   - rotate object you are currently holding
wheel up            - throw object you are currently holding
wheel down          - put tagged object into inventory

ALT + m             - commit suicide
ALT + p             - toggle ability to step over small obstacles, e.g. walk up the stairs
i                   - leave bot

Tab                 - toggle interface mode
Numpad Enter        - switch between 1st person and 3rd person camera
Numpad *            - toggle freelook (look around without rotating the bot)

f                   - point gesture
g                   - fall back gesture
h                   - salute gesture
j                   - wave gesture
k                   - flip out gesture
l                   - play all animations

Inventar
--------
left click          - drop item or move item between inventories when you have two inventory windows
middle click        - grab item from your inventory
right click         - use object, for weapons: arm it or put it away into your inventory

Vehicle controls
----------------
mouse movement      - look around (when in UI mode, push mouse cursor into screen borders)
arrow keys          - look around
w/a/s/d             - move forwards, left, backwards, right
Space               - up (air vehicles only)
LCtrl               - down (air vehicles only)

left click          - trigger selected weapon
right click         - select next weapon

x                   - exit vehicle
ALT + x             - eject from vehicle

Misc controls
-------------
Esc                 - exit to main menu

LAlt + drag         - move UI windows

o                   - rotate sky forward fast
Shift + o           - rotate sky backwards fast

F5                  - quick save (to ~/.config/openzone/quicksave.ozState)
F7                  - quick load (from ~/.config/openzone/quicksave.ozState)
F8                  - load autosaved state (from ~/.config/openzone/autosave.ozState)
F10                 - screenshot (saved to '~/.config/openzone/screenshot DATE TIME.bmp')
Ctrl + F11          - toggle fullscreen mode
F12                 - minimise and pause
Ctrl + F12          - exit application

Troubleshooting
---------------
- Make sure you have the *LATEST* display drivers.
- Turning off desktop effects on Linux may improve performance when running in windowed mode.
- You need at least OpenGL 2.1 compatible graphic card & driver that additionally supports the
  following extensions:
  - GL_ARB_framebuffer_object and
  - GL_EXT_texture_compression_s3tc.
  A cards with complete DirectX 9.0c support should do, a DirectX 10 card will certainly do.
  On Linux the engine works both with properitary and opensource Gallium3D drivers.
- If you are using Gallium3D based drivers and all textures are (mostly) missing, set
  shader.setSamplerIndices to "false" in client.rc file.
- If you are using AMD/ATI Catalyst driver and terrain looks white/grey, set
  shader.setSamplerIndices to "true" in client.rc file.
- If you are using some old graphics card or AMD/ATI Catalyst drivers and MD2 models are missing
  set shader.vertexTexture to "false" in client.rc file.
- For better performance you can enable MD2 animation to be performed in the vertex shader by
  setting shader.vertexTexture to "true" in client.rc file.

Dependencies
------------
- pthreads (already included in glibc on Linux)
- libintl (already included in glibc on Linux)
- libpulse (for Linux-like systems)
- SDL
- SDL_image (for ozBuild tool)
- SDL_ttf
- OpenGL
- OpenAL
- libvorbis
- libmad (if compiled with MP3 support)
- Lua

On Linux you have to install packages that provide those libraries.
For Windows build, all dependencies are included.

Build dependencies
------------------
- GNU/Linux or similar OS
- gettext
- cmake
- GNU make
- GNU binutils
- GCC >= 4.6 or LLVM/Clang >= 3.0
- development packages of libraries from previous section

Command line
------------
openzone [-v] [-l | -i <function>] [-t <num>] [-p <prefix>]

-v
      More verbose log output.

-l
      Skip main menu and load autosaved state.
      Autosaved game state resides in ~/.config/openzone/autosave.ozState.

-i <mission>
      Skip main menu and start mission <mission>.
      Missions reside in <prefix>/share/openzone/lua/mission in files named
      <mission>.lua files.

-t <num>
      Exits after <num> seconds (can be a floating-point number).
      For benchmarking purposes.

-p <prefix>
      Sets data directory to <prefix>/share/openzone and locale directory to
      <prefix>/share/locale.
      Default: '/usr'.

Settings
--------
Settings file is located in "$HOME/.config/openzone/client.rc" on Unix-like systems or in
"%APPDATA%\OpenZone\client.rc" on Windows. Full path is (assuming default setup):
- Linux:      /home/<user>/.config/openzone/client.rc
- Wine:       /home/<user>/.wine/drive_c/users/<user>/Application Data/client.rc
- Windows XP: C:\Documents and Settings\<user>\Application Data\OpenZone\client.rc
- Windows 7:  C:\Users\<user>\AppData\Roaming\OpenZone\client.rc

variable [type] default_value
-----------------------------
_version [string] "0.3.0"
  Version of OpenZone for which the settings file was created. The only effect of this setting is
  that on version mismatch, OpenZone dumps its configuration on exit and rewrites the old file.
  Deprecated variables are not removed during that process.

camera.angle [float] 80.0
  Vertical camera angle in degrees. Horizontal angle is calculated from aspect ratio.

camera.aspect [float] 0.0
  Aspect ratio width/height. 0.0 means it is calculated from the current screen resolution.

camera.keysXSens [float] 2.0
  Key sensitivity for up/down arrow keys.

camera.keysYSens [float] 2.0
  Key sensitivity for left/right arrow keys.

camera.mouseXSens [float] 0.005
  Mouse sensitivity for X axis when rotating camera.

camera.mouseYSens [float] 0.005
  Mouse sensitivity for X axis when rotating camera.

dir.prefix [string] Linux default: "/usr", Windows default: "."
  Prefix path to game directory structure. The share/openzone and share/locale directories must be
  located inside the prefix directory.

locale.messages [string] ""
  Which locale should be used for translations. Empty string means the system locale is used.
  On Linux, run "locale -a" to see a list of installed/generated locales on your system.
  Currently there are only Slovene and English translations.

modules.profile.playerName [string] "<user>"
  Name of the player. Username of the current user is used as default.

mouse.accelFactor [float] 0.05
  Only used while in fullscreen mode on X11. Usually OS applies mouse acceleration before OpenZone
  reads the mouse input. The only exception is when running in fullscreen mode on X11 server, when
  OpenZone receives unaccelerated mouse input. In that case it tries to emulate X11 mouse
  acceleration, since mouse cursor moves pretty slow otherwise.

render.deferred [bool] false
  Enable deferred shading. Not implemented.
  This option has effect only if offscreen rendering is enabled.

render.offscreen [bool] true
  Enable rendering into offscreen buffers instead directly to the screen. This enables some advanced
  effects like deferred shading, postprocess effects. It also enables that the world and UI are
  rendered at resolutions that differ from the screen resolution.

render.postprocess [bool] true
  When enabled, world is rendered into an offscreen buffer. The image is postprocessed and then
  rendered to the screen. This technique only applies for the world, UI is always rendered directly.
  The offscreen buffer may use different resolution than the screen.

render.scale [float] 1.0
  Scale of resolution of offscreen buffer where world is rendered to.
  This option has effect only if offscreen rendering is enabled.

render.showAim [bool] false
  Draw a small green box at the point you are currenty aiming at. It is intended for testing
  purposes, mostly for testing collision detection.

render.showBounds [bool] false
  Show AABBs of various objects. Green for solid objects, blue-grey for non-solid objects,
  blue for structures and purple for structure entities.

render.visibilityRange [float] 300.0
  Visibility range.

screen.bpp [int] 0
  Desired bits per pixel for the screen mode. This setting is not necessarily obeyed. If zero, SDL
  chooses on its own.

screen.full [bool] false
  Start in fullscreen mode.

screen.height [int] 0
  Vertical screen resolution. Zero equals desktop resolution.

screen.leaveScreensaver [bool] true
  Do not disable screensaver. Usually there is no need to explicitly disable screensaver, since
  most system do this on their own when running an fullscreen application and player moves the mouse
  and/or presses the keys most of the time.
  You can turn this to false if you want to disable screensaver anyways. Note that screensaver may
  remain turned off if the application is not terminated properly.

screen.nvVSync [bool] true
  Try to use vertical synchronisation for Nvidia cards on Linux (sets __SYNC_TO_VBLANK=1).

screen.width [int] 0
  Horizontal screen resolution. Zero equals desktop resolution.

seed [int|string] "TIME"
  Seed for random generator. Integer number or "TIME" string to use the current Unix time as the
  seed.

shader.setSamplerIndices [bool] false
  Set indices for texture samplers. It set, breaks textures on Gallium3D driver. If not set, breaks
  textures on older ATI/AMD Catalyst drivers.

shader.vertexTexture [bool] false
  Use vertex texture fetch feature to perform MD2 model animation in vertex shader. Should work
  on GeForce 6 or newer or Radeon 2xxx or newer. Does not work with Catalyst drivers.

sound.device [string] ""
  Sound device to pass to OpenAL. Empty string to let OpenAL choose on its own.

sound.volume [float] 1.0
  Sound volume factor. 1.0 means full (original) intensity.

ui.aspect [float] 0.0
  Aspect ratio for UI. If 0.0, aspect is the same as resolution and bots axes are scaled by ui.scale
  factor. Otherwise, height is scaled by ui.scale and width is height scaled by ui.aspect.

ui.scale [float] 1.0
  Scale for UI resolution. 1.0 means UI is rendered with the screen resolution.

ui.showBuild [bool] false
  Show a windows with buttons to add various objects into the world. For development purpuses.

ui.showDebug [bool] false
  Show a window that shows coordinates, orientation and other data about camera, controlled bot,
  tagged object etc. For development purposes.

OpenZone engine copyright
-------------------------
Copyright (C) 2002-2011  Davorin Učakar
Author:  Davorin Učakar
Contact: davorin.ucakar@gmail.com

This program comes with ABSOLUTELY NO WARRANTY.
This is free software under GNU GPLv3 licence, and you are welcome to redistribute it
under certain conditions; See COPYING file for details.

Data copyrights
---------------
Data (everything under 'share/openzone' directory) and included libraries ('*.dll' under 'bin'
directory) are work of various authors. See respective *README and *COPYING files for details.
